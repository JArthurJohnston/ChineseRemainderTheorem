'From Pharo2.0 of 7 March 2013 [Latest update: #20619] on 29 November 2013 at 6:54:41 pm'!TestCase subclass: #ChineseRemainderCubeTest	instanceVariableNames: 'CRCube'	classVariableNames: ''	poolDictionaries: ''	category: 'Joe-Projects-Tests'!!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/3/2013 13:44'!testFulcrum	self assert: CRCube fulcrum = 86.! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/9/2013 12:35'!testInitialize		self assert: CRCube primeSet class = Array.	self assert: CRCube primeSet size = 3.	self assert: CRCube coordSet class = Array.	self assert: CRCube coordSet size = 3.	self assert: CRCube primeSet first = 3.	self assert: CRCube primeSet second = 4.	self assert: CRCube primeSet third = 5.	"IE theyre NOT = to 4, 5 and 8"	CRCube coordSet: #(3 5 8).	self assert: CRCube coordSet first = 3.	self assert: CRCube coordSet second = 5.	self assert: CRCube coordSet third = 8.	CRCube primeSet: #(3 5 8).	self assert: CRCube primeSet first = 3.	self assert: CRCube primeSet second = 5.	self assert: CRCube primeSet third = 8.	self assert: CRCube primeProduct = (3 * 5 * 8).! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/3/2013 13:44'!testSolutionForForFor	self  assert: (CRCube solutionFor: 0 for: 0 for: 0) = 0.	self  assert: (CRCube solutionFor: 1 for: 1 for: 1) = 1.! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/2/2013 12:46'!testSolveForGroup	| result |	CRCube coordSet: #(2 2 1).	CRCube primeSet: #(3 4 5).	result := CRCube solveForGroup: 1.	self assert: result = 20.	result := CRCube solveForGroup: 2.	self assert: result = 30.	result := CRCube solveForGroup: 3.	self assert: result = 36.	result := CRCube solveForGroup: 4.	self assert: result = CRCube.! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:43'!setUp	CRCube := ChineseRemainderCube new.	CRCube coordSet: #(2 2 1).	CRCube primeSet: #(3 4 5).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/9/2013 16:47'!testFillCubeAndList	| cube list |	CRCube fillCubeAndList.	cube := CRCube cube.	list := CRCube list.	self assert: cube class = ThreeDimArray.	self assert: list class = SortedCollection.	self assert: list size = ((CRCube primeSet at: 1) * (CRCube primeSet at: 2) * (CRCube primeSet at: 3)).	list do: [ :each | 		| coords |		coords := each value.		self assert: each key = (cube atX: (coords at: 1) atY: (coords at: 2) atZ: (coords at: 3)). ].! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstFiveSolutions	self assert: CRCube firstFiveSolutions = #(26 86 146 206 266).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstNSolutionsN	self assert: (CRCube firstNSolutionsN: 7) = #(26 86 146 206 266 326 386).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstSolution	self assert: CRCube firstSolution = 26.! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testSolutionDisplayString	self assert: CRCube solutionDisplayString = 'Any positive integer 86 +- 60'.! !